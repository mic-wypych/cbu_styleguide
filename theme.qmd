## Theme

This chapter discusses the `cbu_theme()` function for styling the ggplot objects into cbu-styled plots.

**note**: should we have logo on the plots?

## The function

Put the function here and discuss it a bit.

```{r warning = FALSE, message = FALSE}
library(tidyverse)
library(showtext)

font_add_google("Open Sans")
showtext_auto()
font <- "Open Sans"


cbu_cat <- c("#b96784", "#88375d","#9bb6bd","#5E9FB1", "#755687","#4a2d5e", "#eb676c","#aa2041", "#f2d1ab", "#dd9d38")
cbu_cat_1 <- cbu_cat[c(1:5)]
cbu_cat_2 <- cbu_cat[c(6:10)]

theme_cbu <- function() {
  theme_minimal(base_size = 14, base_family = font) +
    theme(panel.grid.minor = element_blank(),
          panel.grid.major = element_line(color = "grey80", linewidth = .5),
          panel.grid.major.x = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          plot.title = element_text(size = 1.68*12, face = "bold", family = font),
          plot.subtitle = element_text(face = "italic", family = font),
          axis.title = element_text(face = "bold", size = 8.5),
          axis.text = element_text(size = 8),
          strip.text = element_text(face = "bold", size = 10),
          strip.background = element_rect(fill = NA, color = NA),
          plot.caption = element_text(face = "italic", family = font, size = 8),
          legend.title = element_text(face = "bold", size = 10),
          legend.text = element_text(size = 10),
          legend.key.size = unit(10, "pt"),
          legend.position = "top",
          legend.justification='left',
          legend.direction='horizontal',
          plot.margin = unit(c(t =0, r = 0, b = 0, l = 0), "cm")
          )
}
```

The function is based on theme minimal. It uses **Open Sans font** with base size of **14**. The main idea behind the theme function was to declutter the plot and take care of some basic layout & text hierarchy (especially the legend which can be rendered a bit awkwardly by default).

## How it looks like

Here is a sample plot:

```{r}
some_df <- data.frame(
    a = sample(letters[1:7], 1000, replace = T)
) %>%
count(a)

some_df %>%
ggplot(aes(x = a, y = n)) +
geom_col(fill = cbu_cat_1[1], width = .6) +
geom_text(aes(label = n), nudge_y = 2, size = 3) +
labs(x = "letters", y = "counts") +
coord_flip() +
theme_cbu()
```

Another example with continuous variables:

```{r}
cont_df <- data.frame(x = runif(1e3, 0, 4),
                      a = sample(letters[1:3], 1e3, replace = T)) %>%
  mutate(y = ifelse(a == "a",
                    rnorm(1e3, mean = sin(x) + 3*cos(x^2) - x^2 + .5*x^3),
                    ifelse(a == "b",
                           rnorm(1e3, mean = -sin(x) + 3*cos(x^2) + x^2 - .2*x^3),
                           rnorm(1e3, mean = 6 + 2*sin(x) - 1.5*cos(x^2) - x^2 + .5*x^3))))
           


cont_df %>%
  ggplot(aes(x = x, y = y, color = a)) +
  geom_point(alpha = .5) +
  geom_smooth(method = "gam", se = F) +
  scale_color_manual(values = cbu_cat_2[c(2,4,1)]) +
  labs(x = "jakiś czas", y = "jakaś ilościowa", color = "category") +
  theme_cbu()
```

Below is a breakdown of all elements in the theme:

![](images/clipboard-1620097183.png)

## Table theming

Cbu report format works on typst which necessitates using `{tinytable}` package for making table as it is currently the only one that supports rendering in typst without problems. The main 2 types of tables used in cbu reports are ones containing primarily numbers (e.g. summary statistics, reporting model coefficients) and ones containing primarily text (e.g. item wording). Those can be styled a bit differently to fit conventions and the particular content. General documentation of `{tinytabe}` package can be found [here](https://vincentarelbundock.github.io/tinytable/).

### Tables with numbers

These tables include things like tables with sample characteristics (e.g. age, gender, education, place of living etc), summary statistics like means and standard deviations for important variables etc.

### Text tables

These tables include tables that primarily present text, especially when presenting scale items.

```{r}
library(tinytable)
tt_theme_cbu <- function(x) {
    out <- x |>
    tt() |>
    format_tt(digits = 2, num_fmt = "significant_cell", num_mark_dec = ",") |>
    style_tt(j = 1:ncol(x),align = "c") |>
    style_tt(i = 0, bold = TRUE, line_color = "#ABABAB") |>
    style_tt(i = 0, line = "b", line_color = "#ABABAB") |>
    style_tt(i = 0, line = "t", line_color = "#ABABAB")
    return(out)
}

```

-   One common use case for tables is to display items/questions along with some summary statistics like means and standard deviations

    ```{r}
    long_txt_df <- data.frame(item = c("When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about", "When I am feeling positive emotions I am careful not to express them", "I control my emotions by not expressing them"),
                             mean = c(4.56, 3.43, 4.03),
                             'sd' = c(1.12, 0.89, 1.07))
    colnames(long_txt_df) <- c("item", "mean", "standard deviation")
    tt_theme_cbu(long_txt_df)
    ```

-   Another common case is when we need to merge multiple cells into 1:

    ```{r}
    df_to_merge <-  data.frame(item = c("When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about", "When I am feeling positive emotions I am careful not to express them", "I control my emotions by not expressing them"),
                              reliability = c(.76, .76 , .76))

    df_to_merge |>
    tt_theme_cbu() |>
        style_tt(i = 1, j = 2, rowspan = 3, align = "c", alignv = "m")
    ```

-   Finally in some situations we might want to use some group labels (e.g. when displaying multiple scales in 1 table)

    ```{r}
    df_to_label <- data.frame(item = c("Poles are friendly", "Poles are warm", "Poles are competent", "Poles are capable"),
                             mean = c(4.56, 4.77, 3.44, 4.78),
                             sd = c(1.43, 1.56, 1.23, 1.65))
    colnames(long_txt_df) <- c("item", "mean", "standard deviation")

    df_to_label |>
    tt_theme_cbu() |>
    group_tt(i = list(
        "Warmth" = 1,
        "Competence" = 3))
    ```

### Model output tables

These tables include any statistical models presented in table format. Most commonly those will be regression coefficients and some fit measures like R^2^. Remember to include some uncertainty measures and a common language explanation in text.

```{r}
library(modelsummary)
N <- 1e4
x <- rnorm(N)
x2 <- rnorm(N, 1.3, .8)
y <- rnorm(N, 2 + .3*x - .6*x2)
df_to_lm <- data.frame(x, x2, y)
lm_totable <- lm(y ~ x + x2, df_to_lm)

modelsummary(lm_totable)
```
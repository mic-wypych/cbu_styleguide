{
  "hash": "493bbce6b9961e7c0a7c425e8097348e",
  "result": {
    "engine": "knitr",
    "markdown": "## text\n\nThis part deals with all text-related things in the format. Both in terms of typography and some rules about general writing. The font used throughout the report is Open Sans. The text hierarchy is defined below:\n\n| level | font | size | styling |\n|-------------------|------------------|------------------|------------------|\n| [H1 - report title]{style=\"font-size: 2.0em;\"} | Open sans | 2em | bold? |\n| [H2 - main points]{style=\"font-size: 1.68em;\"} | Open sans | 1.68em |  |\n| [H3 - section title]{style=\"font-size: 1.41em;\"} | Open sans | 1.41em |  |\n| [H4 - subsection]{style=\"font-size: 1.189em; font-weight bold;\"} | Open sans | 1.1892em | bold? underline? |\n| regular text | Open sans | 12pt |  |\n| [caption]{style=\"font-size: 8pt;\"} | Open sans | 8pt | grey |\n| [axis titles]{style=\"font-size: 8.5pt;\"} | Open sans | 8.5pt |  |\n| [axis text]{style=\"font-size: 8pt;\"} | Open sans | 8pt |  |\n| [plot text]{style=\"font-size: 10pt;\"} | Open sans | 10pt |  |\n\n## Some additional rules and tips\n\n-   avoid very long titles for reports\n\n-   avoid very long section titles\n\n-   make sure text does not overlap on plots -\\>\\\n    `{ggrepel}` package has a function `geom_text_repel()` which tries to adjust labels so that they don't overlap. For example this plot has an issue with overlap:\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(dplyr)\n    library(ggplot2)\n    graph_df <- data.frame(\n      target = c(rep(\"group 1\", 6), rep(\"group 2\", 6)),\n      year =  c(rep(2017, 3), rep(2021, 3),rep(2017, 3), rep(2021, 3)),\n      att = factor(c(rep(c(\"ok\", \"meh\", \"not ok\"), 4)), ordered = T, levels = c(\"ok\", \"meh\", \"not ok\")),\n      value = c(.0714, .3121, .6165, .034, .2021, .7639, .0189, .1859, .7952, .0103, .0964, .8933)\n    )\n    \n    graph_df %>%\n      ggplot(aes(x = target, y = value, fill = att)) +\n      geom_col(width = .6) +\n      geom_text(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = \"stack\", vjust = 2) +\n      scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                                  \"meh\" = \"grey80\",\n                                  \"not ok\" = \"tomato4\")) +\n      facet_wrap(~year) +\n      labs(x = NULL, y = NULL) +\n      theme_minimal() +\n      theme(legend.title = element_blank())\n    ```\n    \n    ::: {.cell-output-display}\n    ![](text_files/figure-html/unnamed-chunk-1-1.png){width=672}\n    :::\n    :::\n\n\n\n\n\n\n\n\n    We can deal with this using `geom_text_repel()`. Additional arguments like `force` control how much the labels should be pushed from their original positions.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ggrepel)\n    \n    graph_df %>%\n      ggplot(aes(x = target, y = value, fill = att)) +\n      geom_col(width = .6) +\n      geom_text_repel(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = \"stack\", vjust = 2) +\n      scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                                  \"meh\" = \"grey80\",\n                                  \"not ok\" = \"tomato4\")) +\n      facet_wrap(~year) +\n      labs(x = NULL, y = NULL) +\n      theme_minimal() +\n      theme(legend.title = element_blank())\n    ```\n    \n    ::: {.cell-output-display}\n    ![](text_files/figure-html/unnamed-chunk-2-1.png){width=672}\n    :::\n    :::\n\n\n\n\n\n\n\n\n-   ensure proper contrast for text:\n\n    For example the plot below does not have decent contrast when all text is in black:\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    b_df <- data.frame(\n        a = sample(letters[1:5], 1e3, replace = T),\n        b = sample(letters[1:3], 1e3, replace = T)\n    ) %>%\n    count(a,b)\n    \n    b_df %>%\n    ggplot(aes(x = a, y = n, fill = b)) +\n    geom_col(position = \"fill\") +\n    geom_text(aes(label = n),direction = \"y\", position = \"fill\", vjust = 2) +\n    scale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\n    theme_minimal() +\n    theme(legend.title = element_blank(),\n         legend.position = \"top\")\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Warning in geom_text(aes(label = n), direction = \"y\", position = \"fill\", :\n    Ignoring unknown parameters: `direction`\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output-display}\n    ![](text_files/figure-html/unnamed-chunk-3-1.png){width=672}\n    :::\n    :::\n\n\n\n\n\n\n\n\n    We can fix that using `{ggfittext}` and `geom_fit_text():`\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(ggfittext)\n    \n    b_df %>%\n    ggplot(aes(x = a, y = n, fill = b)) +\n    geom_col(position = \"fill\") +\n    geom_fit_text(aes(label = n, fill = b), position = \"fill\", vjust = 2, contrast = TRUE, show_guide = FALSE) +\n    scale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\n    theme_minimal() +\n    theme(legend.title = element_blank(),\n         legend.position = \"top\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](text_files/figure-html/unnamed-chunk-4-1.png){width=672}\n    :::\n    :::\n\n\n\n\n\n\n\n\n-   Be accessible... Don't write about logits. Opt for Average Marginal Effects in percentages instead. If possible try to get a sense of scale and some interpretation for the effects (maybe something like probability of superiority over cohen's d etc.)\n\n-   But remain scientific. Be precise, don't overstate - this is scientific writing.",
    "supporting": [
      "text_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
[
  {
    "objectID": "color.html",
    "href": "color.html",
    "title": "3  Colors",
    "section": "",
    "text": "3.1 General rules\nThis chapter discusses the cbu color palette and preferable ways to use them\nWe are working with 2 categorical, 4 continuous (plus grey) and 1 divergent palette.\nThere are some general rules for working with color",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "color.html#categorical-palette",
    "href": "color.html#categorical-palette",
    "title": "3  Colors",
    "section": "3.2 Categorical palette",
    "text": "3.2 Categorical palette\nThe full categorical palette looks like this:\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\nplot_swatch(cbu_cat, nrow = 2)\n\n\n\n\n\n\n\n\nIt can be used in 2 categorical palettes with up to 5 colors each:\n\nplot_swatch(cbu_cat_1)\n\n\n\n\n\n\n\nplot_swatch(cbu_cat_2)\n\n\n\n\n\n\n\n\nThe categorical palettes should be used in the following order for increasing number of categories:\nPalette 1:\n\n2 colors: blush, and blue\n3 colors: blush, and blue, purple\n4 colors: blush, and blue, purple and magenta\n\nPalette 2:\n\n2 colors: light yellow, and salmon\n3 colors: light yellow, and salmon, dark purple\n4 colors: light yellow, and salmon, dark purple and dark red\n\nSample plots with those palettes:\n\n\n`summarise()` has grouped output by 'marital'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n`summarise()` has grouped output by 'marital'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "color.html#continuous-palettes",
    "href": "color.html#continuous-palettes",
    "title": "3  Colors",
    "section": "3.3 Continuous palettes",
    "text": "3.3 Continuous palettes\nThe continuous palettes are bases on the categorical ones with one palette in greys added.\n\ncbu_pink &lt;- c('#f79fbc', '#e48dac', '#d17b9b', '#be6a8b', '#ac597b', '#9a486c', '#88375d')\n\ncbu_blue &lt;- c('#c4e0e7', '#a6c7d0', '#89afba', '#6c98a4', '#4f818f', '#306b7b', '#005667')\n\ncbu_purple &lt;- c('#d0ade3', '#bc9ad0', '#a987bc', '#9675aa', '#836397', '#715285', '#5f4174')\n\ncbu_red &lt;- c('#ff9799', '#f18489', '#e3727a', '#d55f6b', '#c74c5d', '#b8384f', '#aa2041')\n\ncbu_yellow &lt;- c('#e4b67d', '#d2a368', '#c09054', '#af7e40', '#9d6b2d', '#8b5a18', '#7a4900')\n\nThat’s how palettes look like on the color wheel:\n\nplot_wheel(c(cbu_pink, cbu_blue, cbu_purple, cbu_red, cbu_yellow))\n\n\n\n\n\n\n\n\nSample plots in the continuous palettes are as follows:\n\ncont_palettes &lt;- list(cbu_pink, cbu_blue, cbu_purple, cbu_red, cbu_yellow)\n\n\ncont_plot &lt;- function(palette) {\n  gss_cat_filt %&gt;%\n  group_by(marital) %&gt;%\n  count(partyid) %&gt;%\n  mutate(perc = round(n/sum(n),2)) %&gt;%\n  ggplot(aes(x = marital, y = perc, fill = partyid)) +\n  geom_col(position = \"fill\")+\n  geom_text(aes(label = paste0(perc*100, \"%\")), position = \"fill\", hjust = 1.7, fontface = \"bold\") +\n  scale_fill_manual(values= palette) +\n  labs(title = \"Marital status and party id in some gss\") +\n  coord_flip() +\n  theme_cbu()\n}\n\nlapply(cont_palettes, cont_plot)\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "color.html#divergent-palette",
    "href": "color.html#divergent-palette",
    "title": "3  Colors",
    "section": "3.4 Divergent palette",
    "text": "3.4 Divergent palette\nThe divergent palette is created by joining the blue and red continuous palettes with 1 additional color as the middle point.\n\ncbu_div &lt;- c(rev(cbu_blue), \"grey80\", cbu_red)\n\ngss_cat_filt %&gt;%\n  ggplot(aes(x = marital, fill = factor(partyid))) +\n  geom_bar(position = \"fill\")+\n  scale_fill_manual(values= cbu_div[c(2,4,6,8,11,13,15)]) +\n  labs(title = \"Marital status and party id in some gss\") +\n  coord_flip() +\n  theme_cbu()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "theme.html",
    "href": "theme.html",
    "title": "4  Theme",
    "section": "",
    "text": "4.1 The function\nThis chapter discusses the cbu_theme() function for styling the ggplot objects into cbu-styled plots.\nnote: should we have logo on the plots?\nPut the function here and discuss it a bit.\nlibrary(tidyverse)\nlibrary(showtext)\n\nfont_add_google(\"Jost\")\nshowtext_auto()\nfont &lt;- \"Jost\"\n\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\ntheme_cbu &lt;- function() {\n  theme_minimal(base_size = 14, base_family = font) +\n    theme(panel.grid.minor = element_blank(),\n          panel.grid.major = element_blank(),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          plot.title = element_text(size = 1.68*12, face = \"bold\", family = font),\n          plot.subtitle = element_text(face = \"italic\", family = font),\n          axis.title = element_text(face = \"bold\", size = 8.5),\n          axis.text = element_text(size = 8),\n          strip.text = element_text(face = \"bold\", size = 10),\n          strip.background = element_rect(fill = NA, color = NA),\n          plot.caption = element_text(face = \"italic\", family = font, size = 8),\n          legend.title = element_text(face = \"bold\", size = 10),\n          legend.text = element_text(size = 10),\n          legend.key.size = unit(10, \"pt\"),\n          legend.position = \"top\",\n          legend.justification='left',\n          legend.direction='horizontal',\n          plot.margin = unit(c(t =0, r = 0, b = 0, l = 0), \"cm\")\n          )\n}\nThe function is based on theme minimal. It uses Open Sans font with base size of 14. The main idea behind the theme function was to declutter the plot and take care of some basic layout & text hierarchy (especially the legend which can be rendered a bit awkwardly by default).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#how-it-looks-like",
    "href": "theme.html#how-it-looks-like",
    "title": "4  Theme",
    "section": "4.2 How it looks like",
    "text": "4.2 How it looks like\nHere is a sample plot:\n\nsome_df &lt;- data.frame(\n    a = sample(letters[1:7], 1000, replace = T)\n) %&gt;%\ncount(a)\n\nsome_df %&gt;%\nggplot(aes(x = a, y = n)) +\ngeom_col(fill = cbu_cat_1[1], width = .6) +\ngeom_text(aes(label = n), nudge_y = 2, size = 3) +\nlabs(x = \"letters\", y = \"counts\") +\ncoord_flip() +\ntheme_cbu()\n\n\n\n\n\n\n\n\nAnother example with continuous variables:\n\ncont_df &lt;- data.frame(x = runif(1e3, 0, 4),\n                      a = sample(letters[1:3], 1e3, replace = T)) %&gt;%\n  mutate(y = ifelse(a == \"a\",\n                    rnorm(1e3, mean = sin(x) + 3*cos(x^2) - x^2 + .5*x^3),\n                    ifelse(a == \"b\",\n                           rnorm(1e3, mean = -sin(x) + 3*cos(x^2) + x^2 - .2*x^3),\n                           rnorm(1e3, mean = 6 + 2*sin(x) - 1.5*cos(x^2) - x^2 + .5*x^3))))\n           \n\n\ncont_df %&gt;%\n  ggplot(aes(x = x, y = y, color = a)) +\n  geom_point(alpha = .5) +\n  geom_smooth(method = \"gam\", se = F) +\n  scale_color_manual(values = cbu_cat_2[c(2,4,1)]) +\n  labs(x = \"jakiś czas\", y = \"jakaś ilościowa\", color = \"category\") +\n  theme_cbu()\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nBelow is a breakdown of all elements in the theme:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#table-theming",
    "href": "theme.html#table-theming",
    "title": "4  Theme",
    "section": "4.3 Table theming",
    "text": "4.3 Table theming\nCbu report format works on typst which necessitates using {tinytable} package for making table as it is currently the only one that supports rendering in typst without problems. The main 2 types of tables used in cbu reports are ones containing primarily numbers (e.g. summary statistics, reporting model coefficients) and ones containing primarily text (e.g. item wording). Those can be styled a bit differently to fit conventions and the particular content. General documentation of {tinytabe} package can be found here.\n\n4.3.1 Tables with numbers\nThese tables include things like tables with sample characteristics (e.g. age, gender, education, place of living etc), summary statistics like means and standard deviations for important variables etc.\n\n\n4.3.2 Text tables\nThese tables include tables that primarily present text, especially when presenting scale items.\n\nlibrary(tinytable)\ntt_theme_cbu &lt;- function(x) {\n    out &lt;- x |&gt;\n    tt() |&gt;\n    format_tt(digits = 2, num_fmt = \"significant_cell\", num_mark_dec = \",\") |&gt;\n    style_tt(j = 1:ncol(x),align = \"c\") |&gt;\n    style_tt(i = 0, bold = TRUE, line_color = \"#ABABAB\") |&gt;\n    style_tt(i = 0, line = \"b\", line_color = \"#ABABAB\") |&gt;\n    style_tt(i = 0, line = \"t\", line_color = \"#ABABAB\")\n    return(out)\n}\n\n\nOne common use case for tables is to display items/questions along with some summary statistics like means and standard deviations\n\nlong_txt_df &lt;- data.frame(item = c(\"When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about\", \"When I am feeling positive emotions I am careful not to express them\", \"I control my emotions by not expressing them\"),\n                         mean = c(4.56, 3.43, 4.03),\n                         'sd' = c(1.12, 0.89, 1.07))\ncolnames(long_txt_df) &lt;- c(\"item\", \"mean\", \"standard deviation\")\ntt_theme_cbu(long_txt_df)\n\n\n\n    \n\n    \n    \n      \n        \n\n              \n                item\n                mean\n                standard deviation\n              \n        \n\n        \n                \n                  When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about\n                  4,6\n                  1,1\n                \n                \n                  When I am feeling positive emotions I am careful not to express them\n                  3,4\n                  0,89\n                \n                \n                  I control my emotions by not expressing them\n                  4\n                  1,1\n                \n        \n      \n    \n\n\n\nAnother common case is when we need to merge multiple cells into 1:\n\ndf_to_merge &lt;-  data.frame(item = c(\"When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about\", \"When I am feeling positive emotions I am careful not to express them\", \"I control my emotions by not expressing them\"),\n                          reliability = c(.76, .76 , .76))\n\ndf_to_merge |&gt;\ntt_theme_cbu() |&gt;\n    style_tt(i = 1, j = 2, rowspan = 3, align = \"c\", alignv = \"m\")\n\n\n\n    \n\n    \n    \n      \n        \n\n              \n                item\n                reliability\n              \n        \n\n        \n                \n                  When I want to feel more positive emotion (such as joy or amusement I change what I'm thinking about\n                  0,76\n                \n                \n                  When I am feeling positive emotions I am careful not to express them\n                  0,76\n                \n                \n                  I control my emotions by not expressing them\n                  0,76\n                \n        \n      \n    \n\n\n\nFinally in some situations we might want to use some group labels (e.g. when displaying multiple scales in 1 table)\n\ndf_to_label &lt;- data.frame(item = c(\"Poles are friendly\", \"Poles are warm\", \"Poles are competent\", \"Poles are capable\"),\n                         mean = c(4.56, 4.77, 3.44, 4.78),\n                         sd = c(1.43, 1.56, 1.23, 1.65))\ncolnames(long_txt_df) &lt;- c(\"item\", \"mean\", \"standard deviation\")\n\ndf_to_label |&gt;\ntt_theme_cbu() |&gt;\ngroup_tt(i = list(\n    \"Warmth\" = 1,\n    \"Competence\" = 3))\n\n\n\n    \n\n    \n    \n      \n        \n\n              \n                item\n                mean\n                sd\n              \n        \n\n        \n                \n                  Poles are friendly\n                  4,6\n                  1,4\n                \n                \n                  Poles are warm\n                  4,8\n                  1,6\n                \n                \n                  Poles are competent\n                  3,4\n                  1,2\n                \n                \n                  Poles are capable\n                  4,8\n                  1,6\n                \n        \n      \n    \n\n\n\n\n\n\n4.3.3 Model output tables\nThese tables include any statistical models presented in table format. Most commonly those will be regression coefficients and some fit measures like R2. Remember to include some uncertainty measures and a common language explanation in text. {modelsummary} package is a really nice package that integrates with {tinytable} that allows to\n\nlibrary(modelsummary)\nN &lt;- 1e4\nx &lt;- rnorm(N)\nx2 &lt;- rnorm(N, 1.3, .8)\ny &lt;- rnorm(N, 2 + .3*x - .6*x2)\ndf_to_lm &lt;- data.frame(x, x2, y)\nlm_totable_1 &lt;- lm(y ~ x, df_to_lm)\nlm_totable_2 &lt;- lm(y ~ x + x2, df_to_lm)\nlm_totable_3 &lt;- lm(y ~ x*x2, df_to_lm)\n\ntt_model_cbu &lt;- function(x) {\n    modelsummary(\n    models = x, \n    fmt = 2,\n    stars = T,\n    estimate = c(\"B\" = \"{estimate}{stars}\"),\n    statistic = c(\"Błąd Standardowy\" = \"{std.error}\"), # Correctly renaming estimate\n    coef_omit = \"Intercept\",\n    shape = term ~ model + statistic,\n    gof_map = \"r.squared\"\n  )\n}\n\ntt_model_cbu(list(\"model 1\" = lm_totable_1, \"model 2\" = lm_totable_2, \"model 3\" = lm_totable_3))\n\n\n\n    \n\n    \n    \n      \n        \n\n \nmodel 1\nmodel 2\nmodel 3\n\n        \n              \n                 \n                B\n                Błąd Standardowy\n                B\n                Błąd Standardowy\n                B\n                Błąd Standardowy\n              \n        \n        \n        \n                \n                  x\n                  0.29***\n                  0.01\n                  0.29***\n                  0.01\n                  0.28***\n                  0.02\n                \n                \n                  x2\n                  \n                  \n                  -0.60***\n                  0.01\n                  -0.60***\n                  0.01\n                \n                \n                  x × x2\n                  \n                  \n                  \n                  \n                  0.00\n                  0.01\n                \n                \n                  R2\n                  0.064\n                  \n                  0.244\n                  \n                  0.244",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "chart_types.html",
    "href": "chart_types.html",
    "title": "5  Chart types",
    "section": "",
    "text": "This part discusses specific types of charts, when to use them and some tweaks to make them work.\nCenter for Research on Prejudice reports can contain various types of plots but there are some common ones that appear more often then others and also have some specific issues related to them. This section provides some suggestions on how to build specific types of charts and how to address the issues that arise with each of those types.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(showtext)\n\nŁadowanie wymaganego pakietu: sysfonts\nŁadowanie wymaganego pakietu: showtextdb\n\nlibrary(ggrepel)\nlibrary(ggfittext)\nfont_add_google(\"Jost\")\nshowtext_auto()\nfont &lt;- \"Jost\"\n\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\ntheme_cbu &lt;- function() {\n  theme_minimal(base_size = 14, base_family = font) +\n    theme(panel.grid.minor = element_blank(),\n          panel.grid.major = element_blank(),\n          panel.grid.major.x = element_blank(),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          plot.title = element_text(size = 1.68*12, face = \"bold\", family = font),\n          plot.subtitle = element_text(face = \"italic\", family = font),\n          axis.title = element_text(face = \"bold\", size = 8.5),\n          axis.text = element_text(size = 8),\n          strip.text = element_text(face = \"bold\", size = 10),\n          strip.background = element_rect(fill = NA, color = NA),\n          plot.caption = element_text(face = \"italic\", family = font, size = 8),\n          legend.title = element_text(face = \"bold\", size = 10),\n          legend.text = element_text(size = 10),\n          legend.key.size = unit(10, \"pt\"),\n          legend.position = \"top\",\n          legend.justification='left',\n          legend.direction='horizontal',\n          plot.margin = unit(c(t =0, r = 0, b = 0, l = 0), \"cm\")\n          )\n}\n\n\n5.0.1 Bar charts\nWe’ll start with bar charts. Those are pretty common in cbu reports for showing and comparing means or counts. Some general rules to follow here are:\n\nif possible add text above the bars\nmake the bars a bit thinner than default ggplot behaviour\nUnless necessary don’t use multiple colors\n\nHere is an example of a cbu styled bar plot showing some means:\n\nbar_df &lt;- data.frame(\n    category = letters[1:7],\n    means = round(rnorm(7, 6, 1.5), 2)\n)\n\nbar_df %&gt;%\nggplot(aes(x = category, y = means)) +\ngeom_col(fill= cbu_cat_1[1], width = .6) +\ngeom_text(aes(label = means), nudge_y = .5) +\ntheme_cbu()\n\n\n\n\n\n\n\n\nA few more specific issues that often arise for bar plots:\n\nposition adjustments\nBar plot work best with position dodge. The only thing to remember is to set the width right and add the position adjustment to any additional geoms used in the plot.\n\nbar_df$category_2 &lt;- c(rep(\"a\", 3), rep(\"b\", 4))\n\nbar_df %&gt;%\nggplot(aes(x = category_2, y = means, fill = category)) +\ngeom_col(width = .6, position = position_dodge(width = .6)) +\ngeom_text(aes(label = means),position = position_dodge(width = .6), vjust = -1) +\nscale_fill_manual(values = cbu_cat) +\ntheme_cbu()\n\n\n\n\n\n\n\n\nlong labels:\nSometimes we might be working with very long labels for some categories. Those can be difficult to nicely render on a bar plot. 2 ways to deal with this is either to flip coordinates that often makes the labels more readable or to wrap them so that they will have fixed maximum length on a single line. In case of flipping coordinates you will need to adjust the grid lines as well\nOption 1:\n\ndf_long_labs &lt;- data.frame(\n    item = c(\"When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\",\n            \"I keep my emotions to myself.\",\n            \"When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\",\n            \"When I am feeling positive emotions, I am careful not to express them.\"),\n    mean = c(4.54, 2.34, 6.44, 3.55),\n    sd = c(0.67, 1.23, 1.12, 0.89)\n)\n\ndf_long_labs %&gt;%\nggplot(aes(x = item, y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_flip() +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\", linewidth = .5))\n\n\n\n\n\n\n\n\n\nOption 2:\n\ndf_long_labs &lt;- data.frame(\n    item = c(\"When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\",\n            \"I keep my emotions to myself.\",\n            \"When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\",\n            \"When I am feeling positive emotions, I am careful not to express them.\"),\n    mean = c(4.54, 2.34, 6.44, 3.55),\n    sd = c(0.67, 1.23, 1.12, 0.89)\n)\n\ndf_long_labs %&gt;%\nggplot(aes(x = str_wrap(item, 40), y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_flip() +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\", linewidth = .5))\n\n\n\n\n\n\n\n\nadding errorbars:\n\ndf_long_labs %&gt;%\nggplot(aes(x = item, y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_errorbar(aes(x = str_wrap(item, 40), ymin = mean - sd, ymax = mean + sd), width = .2) +\ntheme_cbu()\n\n\n\n\n\n\n\n\nsome likert-scale related issues:\ngeom_bar() will always by default start the plots from 0. This is generally good behavior but in case of likert scale items we often want them to start from 1. The best way to adjsut this is via coord_cartesian() and setting the ylim argument.\n\ndf_long_labs %&gt;%\nggplot(aes(x = str_wrap(item, 40), y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_cartesian(ylim=c(1,7)) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\n\n\n5.0.2 Filled bar charts\nWe use those usually for displaying percentages (e.g. distribution of answers to a likert scale type question). Specific issues that often arise with these kinds of plots are related to very small categories. When trying to show text for those categories it can be difficult to get non-overlappling and readable labels. Some ways to deal with this is to collapse categories if possible or use {ggrepel} to push text.\n\ndf_cat &lt;- data.frame(\n    cat_1 = sample(letters[1:4], 1e3, replace = TRUE),\n    cat_2 = sample(letters[5:7], 1e3, replace = TRUE, prob = c(.01, .6, .39))\n)\n\ndf_cat %&gt;%\ncount(cat_1, cat_2) %&gt;%\ngroup_by(cat_1) %&gt;%\nmutate(perc =n/sum(n)) %&gt;%\nggplot(aes(x = cat_1, y = perc, fill = cat_2)) +\ngeom_col(width = .6) +\ngeom_text_repel(aes(label = scales::percent(perc)), position = position_stack(.5), direction = \"y\") +\nscale_fill_manual(values = cbu_cat_2[c(1,2,4)]) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\n\n5.0.3 Line charts\nLine charts are usually best suited for showing changes in time. One thing that sometimes comes up is a large number of lines that an make the plot unreadable. If possible we can then try to highlight just one (or a few) category and keep the rest in grey.\ndf_lines &lt;- data.frame(\n    date = rep(c(2012,2013,2014,2015, 2016), 5),\n    category = sort(rep(letters[1:5],5)),\n    value = rnorm(25)\n)\n\ndf_lines %&gt;%\nggplot(aes(x=date, y = value, color = category)) +\ngeom_line(linewidth = 1.4) +\nscale_color_manual(values = cbu_cat_2) +\ntheme_cbu()\n\n\n5.0.4 Scatterplots\nUse cases are pretty obvious. The thing to remember is to deal with overlapping points either by setting transparency, using geom_count() or adding jitter.\n\ndf_scatter &lt;- data.frame(\n    x = rnorm(1e3, 4, 1.2),\n    x_2 = rnorm(1e3, 1.2, 1.7),\n    cat = factor(rbinom(1e3, 1, .5))\n)\n\ndf_scatter$y &lt;- rnorm(1e3, 2 + .5*df_scatter$x - .8*df_scatter$x_2 + .5*df_scatter$x*df_scatter$x_2, 1.4)\n\ndf_scatter %&gt;%\nggplot(aes(x = x, y = y, color = cat)) +\ngeom_count(alpha = .3) +\nscale_color_manual(values = cbu_cat_2) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\ndealing with overplotting\nToo many points -&gt; go for geom_count?\nremember about reference line - geom_point will happily start the y axis from a number different from 0 or 1\n\n\n\n5.0.5 Line-of-best-fit charts\nThis in general refers to plots that show some kind of regression-like line of best fit, be it from a GLM, LOESS, GAM etc. Three things to remember about with these kinds of plots is to work with the model itself when plotting (rather than raw data), make sure a proper interpretation is provided and try to include uncertainty.\n\nlibrary(marginaleffects)\nlibrary(splines)\nfit_df &lt;- data.frame(\n    x = rnorm(1e3, 3.4, 1.2)\n)\nfit_df$y &lt;- rnorm(1e3, 1 + 3*sin(fit_df$x) - 1.2*cos(fit_df$x) + .2*fit_df$x^2, .6)\n\nmodel_fit &lt;- lm(y ~ ns(x, 3), fit_df)\n\nplot_predictions(model_fit, condition = \"x\") +\ngeom_point(data = fit_df, aes(x = x, y = y), alpha = .3) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\n\n5.0.6 Correlation plots?\nQuite commonly cbu reports graphically display correlations. One way which was commonly used was to make bar plots with heights of bar representing strength of the correlation. Some alternatives include dumbbell charts that use points instead of bars\n\ncor_df &lt;- data.frame(\n    cor = c(.44, .34, .21, .13, .11, -.23),\n    var = sort(rep(c(\"SDO\", \"RWA\", \"Identification\"), 2)),\n    group = rep(c(\"group a\", \"group b\"), 3)\n)\n\ncor_df %&gt;%\nggplot(aes(y = cor, x = var, fill = group)) +\ngeom_col(position = position_dodge(width = .9)) +\ngeom_text(aes(label = cor), position = position_dodge(width = .9), size = 5) +\ncoord_flip() +\nscale_fill_manual(values = cbu_cat_1) +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\"))\n\n\n\n\n\n\n\n\n\n\n5.0.7 Dumbbell charts\nDumbell charts are good for comparing changes or categories\n\ndf_dc &lt;- data.frame(\n    x = c(2020, 2024, 2020, 2024, 2020, 2024),\n    y = c(5.6, 3.4, 2.5, 5.1, 4.3, 4.8),\n    cat = c(\"a\", \"a\", \"b\", \"b\", \"c\", \"c\")\n)\n\ndf_dc %&gt;%\nggplot(aes(x = cat, y = y, color = factor(x))) +\ngeom_line(aes(group = cat), color = \"grey60\") +\ngeom_point(size = 3) +\ngeom_text(aes(label = y), nudge_x = .2) +\nscale_color_manual(values = cbu_cat_1) +\ncoord_flip() +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\"))\n\n\n\n\n\n\n\n\n\n\n5.0.8 Waffle charts\nWaffle charts can be used as alternative to bar charts for displaying counts or percentages. Preferrably they should also have numbers shown.\n\nlibrary(waffle)\n\ndf_cat %&gt;%\ncount(cat_1, cat_2) %&gt;%\nggplot(\n    aes(fill = cat_1, values = n)\n  ) +\n  geom_waffle(\n    n_rows = 20,\n    size = 0.33, \n    colour = \"white\",\n    flip = TRUE\n  ) +\n  scale_fill_manual(\n    name = NULL,\n    values = cbu_cat_2\n  ) +\n  facet_wrap(~cat_2, nrow = 1) +\n  coord_equal() +\n  theme_enhance_waffle() +\n  theme_cbu()\n\n\n\n\n\n\n\n\n\n\n5.0.9 Pie charts\njust no. Make a bar chart. Or a waffle chart\n\n\n5.0.10 Showing statistical models\nOne additional type of charts that sometimes appears in the reports are path diagrams showing path/SEM models. Unfortunately there isn’t really any good package for displaying path diagrams. IF you really want to make it in R you can use {ggdag} but all the nodes, positions and text has to be coded manually.\nYou can make such diagrams in Figma, diagram.net or Power Point. If you do that remember to use Open Sans font, preferrably size 12 or 14.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Chart types</span>"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "2  text",
    "section": "",
    "text": "2.1 Some additional rules and tips\nThis part deals with all text-related things in the format. Both in terms of typography and some rules about general writing. The font used throughout the report is Open Sans. The text hierarchy is defined below:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>text</span>"
    ]
  },
  {
    "objectID": "text.html#some-additional-rules-and-tips",
    "href": "text.html#some-additional-rules-and-tips",
    "title": "2  text",
    "section": "",
    "text": "avoid very long titles for reports\navoid very long section titles\nmake sure text does not overlap on plots -&gt;\n{ggrepel} package has a function geom_text_repel() which tries to adjust labels so that they don’t overlap. For example this plot has an issue with overlap:\n\nlibrary(dplyr)\nlibrary(ggplot2)\ngraph_df &lt;- data.frame(\n  target = c(rep(\"group 1\", 6), rep(\"group 2\", 6)),\n  year =  c(rep(2017, 3), rep(2021, 3),rep(2017, 3), rep(2021, 3)),\n  att = factor(c(rep(c(\"ok\", \"meh\", \"not ok\"), 4)), ordered = T, levels = c(\"ok\", \"meh\", \"not ok\")),\n  value = c(.0714, .3121, .6165, .034, .2021, .7639, .0189, .1859, .7952, .0103, .0964, .8933)\n)\n\ngraph_df %&gt;%\n  ggplot(aes(x = target, y = value, fill = att)) +\n  geom_col(width = .6) +\n  geom_text(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = position_stack(vjust = .5)) +\n  scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                              \"meh\" = \"grey80\",\n                              \"not ok\" = \"tomato4\")) +\n  facet_wrap(~year) +\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(legend.title = element_blank())\n\n\n\n\n\n\n\n\nWe can deal with this using geom_text_repel(). Additional arguments like force control how much the labels should be pushed from their original positions.\n\nlibrary(ggrepel)\n\ngraph_df %&gt;%\n  ggplot(aes(x = target, y = value, fill = att)) +\n  geom_col(width = .6) +\n  geom_text_repel(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = position_stack(vjust = .5)) +\n  scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                              \"meh\" = \"grey80\",\n                              \"not ok\" = \"tomato4\")) +\n  facet_wrap(~year) +\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(legend.title = element_blank())\n\n\n\n\n\n\n\n\nensure proper contrast for text:\nFor example the plot below does not have decent contrast when all text is in black:\n\nb_df &lt;- data.frame(\n    a = sample(letters[1:5], 1e3, replace = T),\n    b = sample(letters[1:3], 1e3, replace = T)\n) %&gt;%\ncount(a,b)\n\nb_df %&gt;%\nggplot(aes(x = a, y = n, fill = b)) +\ngeom_col(position = \"fill\") +\ngeom_text(aes(label = n),direction = \"y\", position = \"fill\", vjust = 2) +\nscale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\ntheme_minimal() +\ntheme(legend.title = element_blank(),\n     legend.position = \"top\")\n\nWarning in geom_text(aes(label = n), direction = \"y\", position = \"fill\", :\nIgnoring unknown parameters: `direction`\n\n\n\n\n\n\n\n\n\nWe can fix that using {ggfittext} and geom_fit_text():\n\nlibrary(ggfittext)\n\nb_df %&gt;%\nggplot(aes(x = a, y = n, fill = b)) +\ngeom_col(position = \"fill\") +\ngeom_fit_text(aes(label = n, fill = b), position = \"fill\", vjust = 2, contrast = TRUE, show_guide = FALSE) +\nscale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\ntheme_minimal() +\ntheme(legend.title = element_blank(),\n     legend.position = \"top\")\n\n\n\n\n\n\n\n\nBe accessible… Don’t write about logits. Opt for Average Marginal Effects in percentages instead. If possible try to get a sense of scale and some interpretation for the effects (maybe something like probability of superiority over cohen’s d etc.)\nBut remain scientific. Be precise, don’t overstate - this is scientific writing.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>text</span>"
    ]
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "6  tutorial",
    "section": "",
    "text": "This chapter is a walkthrough the report template. It’s aim is to present each part of the report and show how to use it to write and render a ready cbu report.\n\n6.0.1 General structure of the report\nWhen you get/download a directory with the report template you should see the following structure (to be cleaned later):\n\ncbu_report\n├── template.qmd\n├── cbu_report.rproj\n└── _extensions\n    └── cbu_format_typst\n        ├── logo.png\n        ├── Jost\n        ├── typst-show.typ\n        ├── typst-template.typ\n        └── _extension.yml\n├── cbulogo-nobg.png\n├── cover_rect_ggdist.png\n\nThe file template.qmd is the report template where all the work will happen. cbu_report.rproj is the R project file that allows us to work on R project level which makes many things like managing paths easier. The _extensions folder contains fonts, logos as well as typst files that map the information from template.qmd to typst and then render in proper format to pdf. DO NOT TOUCH that folder. The remaining files contain the cbu logo and report cover.\n\n\n6.0.2 Brief introduction to quarto\nIn case you have not worked with quarto before it is a multi-language version of R markdown which allows to combine code and text in a single file. You can find excellent documentation here and a youtube tutorial here. In order to be able to work with the template you will need to download and install quarto and some editor like Rstudio or positron.\nWhen you open the template.qmd you will see something like this:\n\nThe top left pane is where the report template is. the top part of it is the yaml header where information like report title, date and authors are included. Below the header is the proper report with text and code chunks. In the same part on the right side is a table of contents based on headers. At the top of this pane you can find some basic text formatting tools like inserting images, links, inserting elements like code chunks, bullet lists etc. The rest is the regular Rstudio look.\n\n\n6.0.3 Tech stack\nWe use quarto for writing and combining text and code. The computations themselves can be done in R, Python or Julia. Rendering to pdf is handled by Typst and citations are made with Zotero. If you don’t know Zotero you can learn more and download here. The bibliography can also be manually edited in the reference.bib file.\n\n\n6.0.4 Walkthrough\nBelow you will see a basic walkthrough of making a simple report. We’ll go through setting the general information in the header, writing and formatting text, adding code chunks for calculations, tables and plots and adding references\n\n6.0.4.1 Yaml header\nThe first thing to fill when making a report is the so called YAML header. It’s the top part of the template.qmd denoted by ---. The information you have to put here are the title of the report, date and authors with their affiliations.\n\nadd video/printscreen\n\n\n\n6.0.4.2 Writing text\nWorking with Rstudio/Positron makes it easy to write text in visual mode which roughly should resemble the basics of programs like Word.\n\nadd video showing example of text:\n\nsimple text\nmain points on page 2\nbullet lists, etc\nsubtitles/headings\nfootnotes\n\n\n\n\n6.0.4.3 Computations\nAny computations have to be included in the so called code chunks. You can add them manually or with ctrl + alt + i.\n\nadd video with examples\n\ncomputations\nplots + labels and captions\ntables + labels and captions\n\n\n\n\n6.0.4.4 References\nBy default the report relies on Zotero which is nicely integrated with RStudio but you can manually edit/create a reference.bib file. Tables and Figures are also references in text.\n\nadd video\n\nZotero citations\nCross referencing tables and\n\n\n\n\n6.0.4.5 Rendering\nOnce the report is ready it is time to render it! You can do it with the render button.\n\nadd a video",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>tutorial</span>"
    ]
  }
]
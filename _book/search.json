[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cbu styleguide",
    "section": "",
    "text": "Preface\nHi,\nthis is a styleguide document for building Center for Research on Prejudice reports. It provides general rules for building cbu-styled plots and tables and gives some rules on putting them in the cbu report format.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 General rules\nThis styleguide is intended to provide general rules on a bunch of things. This ensures more uniform and consistent look and feel across all visualizations in cbu reports. It also lists a bunch of things (especially related to accessibility) that should be considered when making plots and tables. Additionally the idea is to reduce the burden of designing and making choices when creating plots. Ultimately the all functionalities related to making cbu-styled plots and reports should end up in the {cbuR} package.\nIn more details the things discussed are:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "intro.html#general-rules",
    "href": "intro.html#general-rules",
    "title": "1  Introduction",
    "section": "",
    "text": "plots should be accessible. This means ensuring that text is readable, does no overlap but also thinking about colors with regard to black-white scale and colorblindness.\nPlots should have consistent styling. Don’t switch between types. If some categories are code with a given color, they should have that color in the entire report.\nPlots should use shapes that display information in as readable way as possible (e.g. when showing changes in time line plots are often better than bar plots).\nRules are not hard-coded. Sometimes using specific colors (e.g. some political parties have official colors) might be more appropriate than sticking to the official color palette. In such cases always consult other team members.\nCharts and tables should be referenced in text. Specific guidelines are provided in tutorial on the report format. This matters both for readability and apparently is a quarto quirk with {tinytable} package used for rendering tables.\nWe do not use titles for plots. Any explanations are given in the caption",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "2  text",
    "section": "",
    "text": "2.1 Some additional rules and tips\nThis part deals with all text-related things in the format. Both in terms of typography and some rules about general writing. The font used throughout the report is Open Sans. The text hierarchy is defined below:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>text</span>"
    ]
  },
  {
    "objectID": "color.html",
    "href": "color.html",
    "title": "3  Colors",
    "section": "",
    "text": "3.1 General rules\nThis chapter discusses the cbu color palette and preferable ways to use them\nWe are working with 2 categorical, 4 continuous (plus grey) and 1 divergent palette.\nThere are some general rules for working with color",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "color.html#divergent-palette",
    "href": "color.html#divergent-palette",
    "title": "3  Colors",
    "section": "3.4 Divergent palette",
    "text": "3.4 Divergent palette\nThe divergent palette is created by joining the blue and red continuous palettes with 1 additional color as the middle point.\n\ncbu_div &lt;- c(rev(cbu_blue), \"grey80\", cbu_red)\n\ngss_cat_filt %&gt;%\n  ggplot(aes(x = marital, fill = factor(partyid))) +\n  geom_bar(position = \"fill\")+\n  scale_fill_manual(values= cbu_div[c(2,4,6,8,11,13,15)]) +\n  labs(title = \"Marital status and party id in some gss\") +\n  coord_flip() +\n  theme_cbu()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "theme.html",
    "href": "theme.html",
    "title": "4  Theme",
    "section": "",
    "text": "4.1 The function\nThis chapter discusses the cbu_theme() function for styling the ggplot objects into cbu-styled plots.\nnote: should we have logo on the plots?\nPut the function here and discuss it a bit.\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(tinytable)\nlibrary(modelsummary)\n\nfont_add_google(\"Open Sans\")\nshowtext_auto()\nfont &lt;- \"Open Sans\"\n\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\ntheme_cbu &lt;- function() {\n  theme_minimal(base_size = 14, base_family = font) +\n    theme(panel.grid.minor = element_blank(),\n          panel.grid.major = element_line(color = \"grey80\", linewidth = .5),\n          panel.grid.major.x = element_blank(),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          plot.title = element_text(size = 1.68*12, face = \"bold\", family = font),\n          plot.subtitle = element_text(face = \"italic\", family = font),\n          axis.title = element_text(face = \"bold\", size = 8.5),\n          axis.text = element_text(size = 8),\n          strip.text = element_text(face = \"bold\", size = 10),\n          strip.background = element_rect(fill = NA, color = NA),\n          plot.caption = element_text(face = \"italic\", family = font, size = 8),\n          legend.title = element_text(face = \"bold\", size = 10),\n          legend.text = element_text(size = 10),\n          legend.key.size = unit(10, \"pt\"),\n          legend.position = \"top\",\n          legend.justification='left',\n          legend.direction='horizontal',\n          plot.margin = unit(c(t =0, r = 0, b = 0, l = 0), \"cm\")\n          )\n}\nThe function is based on theme minimal. It uses Open Sans font with base size of 14. The main idea behind the theme function was to declutter the plot and take care of some basic layout & text hierarchy (especially the legend which can be rendered a bit awkwardly by default).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#table-themeing",
    "href": "theme.html#table-themeing",
    "title": "4  The function",
    "section": "4.2 Table themeing",
    "text": "4.2 Table themeing\n\nnumbers: summary stats\ntext tables\nmodel output tables",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "chart_types.html",
    "href": "chart_types.html",
    "title": "5  Chart types",
    "section": "",
    "text": "This part discusses specific types of charts, when to use them and some tweaks to make them work.\nCenter for Research on Prejudice reports can contain various types of plots but there are some common ones that appear more often then others and also have some specific issues related to them. This section provides some suggestions on how to build specific types of charts and how to address the issues that arise with each of those types.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(showtext)\n\nLoading required package: sysfonts\nLoading required package: showtextdb\n\nlibrary(ggrepel)\nlibrary(ggfittext)\nfont_add_google(\"Open Sans\")\nshowtext_auto()\nfont &lt;- \"Open Sans\"\n\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\ntheme_cbu &lt;- function() {\n  theme_minimal(base_size = 14, base_family = font) +\n    theme(panel.grid.minor = element_blank(),\n          panel.grid.major = element_line(color = \"grey80\", linewidth = .5),\n          panel.grid.major.x = element_blank(),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          plot.title = element_text(size = 1.68*12, face = \"bold\", family = font),\n          plot.subtitle = element_text(face = \"italic\", family = font),\n          axis.title = element_text(face = \"bold\", size = 8.5),\n          axis.text = element_text(size = 8),\n          strip.text = element_text(face = \"bold\", size = 10),\n          strip.background = element_rect(fill = NA, color = NA),\n          plot.caption = element_text(face = \"italic\", family = font, size = 8),\n          legend.title = element_text(face = \"bold\", size = 10),\n          legend.text = element_text(size = 10),\n          legend.key.size = unit(10, \"pt\"),\n          legend.position = \"top\",\n          legend.justification='left',\n          legend.direction='horizontal',\n          plot.margin = unit(c(t =0, r = 0, b = 0, l = 0), \"cm\")\n          )\n}\n\n\n5.0.1 Bar charts\nWe’ll start with bar charts. Those are pretty common in cbu reports for showing and comparing means or counts. Some general rules to follow here are:\n\nif possible add text above the bars\nmake the bars a bit thinner than default ggplot behaviour\nUnless necessary don’t use multiple colors\n\nHere is an example of a cbu styled bar plot showing some means:\n\nbar_df &lt;- data.frame(\n    category = letters[1:7],\n    means = round(rnorm(7, 6, 1.5), 2)\n)\n\nbar_df %&gt;%\nggplot(aes(x = category, y = means)) +\ngeom_col(fill= cbu_cat_1[1], width = .6) +\ngeom_text(aes(label = means), nudge_y = .5) +\ntheme_cbu()\n\n\n\n\n\n\n\n\nA few more specific issues that often arise for bar plots:\n\nposition adjustments\n\n\nbar_df$category_2 &lt;- c(rep(\"a\", 3), rep(\"b\", 4))\n\nbar_df %&gt;%\nggplot(aes(x = category_2, y = means, fill = category)) +\ngeom_col(width = .6, position = position_dodge(width = .6)) +\ngeom_text(aes(label = means),position = position_dodge(width = .6), vjust = 1) +\nscale_fill_manual(values = cbu_cat) +\ntheme_cbu()\n\n\n\n\n\n\n\n\nlong labels:\nSometimes we might be working with very long labels for some categories. Those can be difficult to nicely render on a bar plot. 2 ways to deal with this is either to flip coordinates that often makes the labels more readable or to wrap them so that they will have fixed maximum length on a single line. In case of flipping coordinates you will need to adjust the grid lines as well\nOption 1:\n\ndf_long_labs &lt;- data.frame(\n    item = c(\"When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\",\n            \"I keep my emotions to myself.\",\n            \"When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\",\n            \"When I am feeling positive emotions, I am careful not to express them.\"),\n    mean = c(4.54, 2.34, 6.44, 3.55),\n    sd = c(0.67, 1.23, 1.12, 0.89)\n)\n\ndf_long_labs %&gt;%\nggplot(aes(x = item, y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_flip() +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\", linewidth = .5))\n\n\n\n\n\n\n\n\n\nOption 2:\n\ndf_long_labs &lt;- data.frame(\n    item = c(\"When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\",\n            \"I keep my emotions to myself.\",\n            \"When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\",\n            \"When I am feeling positive emotions, I am careful not to express them.\"),\n    mean = c(4.54, 2.34, 6.44, 3.55),\n    sd = c(0.67, 1.23, 1.12, 0.89)\n)\n\ndf_long_labs %&gt;%\nggplot(aes(x = str_wrap(item, 40), y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_flip() +\ntheme_cbu() +\ntheme(panel.grid.major.y = element_blank(),\n     panel.grid.major.x = element_line(color = \"grey80\", linewidth = .5))\n\n\n\n\n\n\n\n\nadding errorbars:\nerror\nsome likert-sclae related issues:\ngeom_bar() will always by default start the plots from 0. This is generally good behavior but in case of likert scale items we often want them to start from 1. The best way to adjsut this is via coord_cartesian() and setting the ylim argument.\n\ndf_long_labs %&gt;%\nggplot(aes(x = str_wrap(item, 40), y = mean)) +\ngeom_col(fill = cbu_cat_2[2], width = .6) +\ngeom_text(aes(label = mean), nudge_y = .5) +\ncoord_cartesian(ylim=c(1,7)) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\n\n\n5.0.2 Filled bar charts\nWe use those usually for displaying percentages (e.g. distribution of answers to a likert scale type question). Specific issues that often arise with these kinds of plots are related to very small categories. When trying to show text for those categories it can be difficult to get non-overlappling and readable labels. Some ways to deal with this is to collapse categories if possible or use {ggrepel} to push text.\n\ndf_cat &lt;- data.frame(\n    cat_1 = sample(letters[1:4], 1e3, replace = TRUE),\n    cat_2 = sample(letters[5:7], 1e3, replace = TRUE, prob = c(.01, .6, .39))\n)\n\ndf_cat %&gt;%\ncount(cat_1, cat_2) %&gt;%\ngroup_by(cat_1) %&gt;%\nmutate(perc =n/sum(n)) %&gt;%\nggplot(aes(x = cat_1, y = perc, fill = cat_2)) +\ngeom_col(width = .6) +\ngeom_text_repel(aes(label = scales::percent(perc)), position = \"fill\", direction = \"y\") +\nscale_fill_manual(values = cbu_cat_2[c(1,2,4)]) +\ntheme_cbu()\n\n\n\n\n\n\n\n\n\n\n5.0.3 Line charts\nLine charts are usually best suited for showing changes in time.\n\nshowing changes in time\nAvoid spaghetti plots\nhighlighting categories?\n\n\n\n5.0.4 Scatterplots\n\ndealing with overplotting\nToo many points -&gt; go for geom_count?\nremember about reference line - geom_point will happily start the y axis from a number different from 0 or 1\n\n\n\n5.0.5 Line-of-best-fit charts\nThis in general refers to plots that show some kind of regression-like line of best fit, be it from a GLM, LOESS, GAM etc.\n\nMake sure a proper interpretation is provided.\nTry to include uncertainty\n\n\n\n5.0.6 Correlation plots?\n\nright now we make bar plots. Is this the best option?\nDo we want to include asterikses for significant relations?\n\n\n\n5.0.7 Dumbbell charts\n\nshowing changes\n\n\n\n5.0.8 Waffle charts?\n\ndo we want them? For displaying simple percentages they might be ok\n\n\n\n5.0.9 Maps?\n\n\n5.0.10 Pie charts\njust no. Make a bar chart.\n\n\n5.0.11 Showing statistical models\n\nSEM models?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Chart types</span>"
    ]
  },
  {
    "objectID": "chart_types.html#chart-types",
    "href": "chart_types.html#chart-types",
    "title": "5  General rules?",
    "section": "",
    "text": "5.1.1 Bar charts\nPreferably for displaying\n\ngeneral rules\nposition dodge\ntext above\nerror bars\nlong labels:\n\nopt for coord_flip?\nwrap the labels\n\nLikert scale issues:\n\nstarting from 1: geom_col() will start from 0 by default. Override with coord_cartesian()\n\n\n\n\n5.1.2 Filled bar charts\n\nmainly for displaying percentages\nworking with text\nWhat to do with very small categories\n\nggrepel\ncollapse categories\nmaybe facet_zoom?\n\n\n\n\n5.1.3 Line charts\n\nshowing changes in time\nAvoid spaghetti plots\nhighlighting categories?\n\n\n\n5.1.4 Scatterplots\n\ndealing with overplotting\nToo many points -&gt; go for geom_count?\nremember about reference line - geom_point will happily start the y axis from a number different from 0 or 1\n\n\n\n5.1.5 Line-of-best-fit charts\nThis in general refers to plots that show some kind of regression-like line of best fit, be it from a GLM, LOESS, GAM etc.\n\nMake sure a proper interpretation is provided.\nTry to include uncertainty\n\n\n\n5.1.6 Correlation plots?\n\nright now we make bar plots. Is this the best option?\nDo we want to include asterikses for significant relations?\n\n\n\n5.1.7 Dumbbell charts\n\nshowing changes\n\n\n\n5.1.8 Waffle charts?\n\ndo we want them? For displaying simple percentages they might be ok\n\n\n\n5.1.9 Maps?\n\n\n5.1.10 Pie charts\njust no. Make a bar chart.\n\n\n5.1.11 Showing statistical models\n\nSEM models?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>General rules?</span>"
    ]
  },
  {
    "objectID": "format_tutorial.html",
    "href": "format_tutorial.html",
    "title": "cbu styleguide",
    "section": "",
    "text": "What this tutorial has to include:\n\nGeneral introduction to quarto?\nOverview of the format and its tech stack:\n\nquarto to write so we work in markdown\ntypst to render to pdf. DO NOT TOUCH\nZotero for citations\nR/python/julia for calculations. Preferably R\n\nWalkthrough making a report\n\nWriting regular text\nfootnotes\nHeadings: we use level 4 headings for sections\nMaking tables\nMaking plots\nReferences:\n\nZotero\nreferencing tables and plots",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>format_tutorial.html</span>"
    ]
  },
  {
    "objectID": "color.html#categorical-palette",
    "href": "color.html#categorical-palette",
    "title": "3  Colors",
    "section": "3.2 Categorical palette",
    "text": "3.2 Categorical palette\nThe full categorical palette looks like this:\n\ncbu_cat &lt;- c(\"#b96784\", \"#88375d\",\"#9bb6bd\",\"#5E9FB1\", \"#755687\",\"#4a2d5e\", \"#eb676c\",\"#aa2041\", \"#f2d1ab\", \"#dd9d38\")\ncbu_cat_1 &lt;- cbu_cat[c(1:5)]\ncbu_cat_2 &lt;- cbu_cat[c(6:10)]\n\nplot_swatch(cbu_cat, nrow = 2)\n\n\n\n\n\n\n\n\nIt can be used in 2 categorical palettes with up to 5 colors each:\n\nplot_swatch(cbu_cat_1)\n\n\n\n\n\n\n\nplot_swatch(cbu_cat_2)\n\n\n\n\n\n\n\n\nThe categorical palettes should be used in the following order for increasing number of categories:\nPalette 1:\n\n2 colors: blush, and blue\n3 colors: blush, and blue, purple\n4 colors: blush, and blue, purple and magenta\n\nPalette 2:\n\n2 colors: light yellow, and salmon\n3 colors: light yellow, and salmon, dark purple\n4 colors: light yellow, and salmon, dark purple and dark red\n\nSample plots with those palettes:\n\n\n`summarise()` has grouped output by 'marital'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n`summarise()` has grouped output by 'marital'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "color.html#continuous-palettes",
    "href": "color.html#continuous-palettes",
    "title": "3  Colors",
    "section": "3.3 Continuous palettes",
    "text": "3.3 Continuous palettes\nThe continuous palettes are bases on the categorical ones with one palette in greys added.\n\ncbu_pink &lt;- c('#f79fbc', '#e48dac', '#d17b9b', '#be6a8b', '#ac597b', '#9a486c', '#88375d')\n\ncbu_blue &lt;- c('#c4e0e7', '#a6c7d0', '#89afba', '#6c98a4', '#4f818f', '#306b7b', '#005667')\n\ncbu_purple &lt;- c('#d0ade3', '#bc9ad0', '#a987bc', '#9675aa', '#836397', '#715285', '#5f4174')\n\ncbu_red &lt;- c('#ff9799', '#f18489', '#e3727a', '#d55f6b', '#c74c5d', '#b8384f', '#aa2041')\n\ncbu_yellow &lt;- c('#e4b67d', '#d2a368', '#c09054', '#af7e40', '#9d6b2d', '#8b5a18', '#7a4900')\n\nSample plots in the continuous palettes are as follows:\n\ncont_palettes &lt;- list(cbu_pink, cbu_blue, cbu_purple, cbu_red, cbu_yellow)\n\n\ncont_plot &lt;- function(palette) {\n  gss_cat_filt %&gt;%\n  group_by(marital) %&gt;%\n  count(partyid) %&gt;%\n  mutate(perc = round(n/sum(n),2)) %&gt;%\n  ggplot(aes(x = marital, y = perc, fill = partyid)) +\n  geom_col(position = \"fill\")+\n  geom_text(aes(label = paste0(perc*100, \"%\")), position = \"fill\", hjust = 1.7, fontface = \"bold\") +\n  scale_fill_manual(values= palette) +\n  labs(title = \"Marital status and party id in some gss\") +\n  coord_flip() +\n  theme_cbu()\n}\n\nlapply(cont_palettes, cont_plot)\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Colors</span>"
    ]
  },
  {
    "objectID": "theme.html#how-it-looks-like",
    "href": "theme.html#how-it-looks-like",
    "title": "4  Theme",
    "section": "4.2 How it looks like",
    "text": "4.2 How it looks like\nHere is a sample plot:\n\nsome_df &lt;- data.frame(\n    a = sample(letters[1:7], 1000, replace = T)\n) %&gt;%\ncount(a)\n\nsome_df %&gt;%\nggplot(aes(x = a, y = n)) +\ngeom_col(fill = cbu_cat_1[1], width = .6) +\ngeom_text(aes(label = n), nudge_y = 2, size = 3) +\nlabs(x = \"letters\", y = \"counts\") +\ncoord_flip() +\ntheme_cbu()\n\n\n\n\n\n\n\n\nAnother example with continuous variables:\n\ncont_df &lt;- data.frame(x = runif(1e3, 0, 4),\n                      a = sample(letters[1:3], 1e3, replace = T)) %&gt;%\n  mutate(y = ifelse(a == \"a\",\n                    rnorm(1e3, mean = sin(x) + 3*cos(x^2) - x^2 + .5*x^3),\n                    ifelse(a == \"b\",\n                           rnorm(1e3, mean = -sin(x) + 3*cos(x^2) + x^2 - .2*x^3),\n                           rnorm(1e3, mean = 6 + 2*sin(x) - 1.5*cos(x^2) - x^2 + .5*x^3))))\n           \n\n\ncont_df %&gt;%\n  ggplot(aes(x = x, y = y, color = a)) +\n  geom_point(alpha = .5) +\n  geom_smooth(method = \"gam\", se = F) +\n  scale_color_manual(values = cbu_cat_2[c(2,4,1)]) +\n  labs(x = \"jakiś czas\", y = \"jakaś ilościowa\", color = \"category\") +\n  theme_cbu()\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nBelow is a breakdown of all elements in the theme:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "theme.html#table-theming",
    "href": "theme.html#table-theming",
    "title": "4  Theme",
    "section": "4.3 Table theming",
    "text": "4.3 Table theming\nCbu report format works on typst which necessitates using {tinytable} package for making table as it is currently the only one that supports rendering in typst without problems. The main 2 types of tables used in cbu reports are ones containing primarily numbers (e.g. summary statistics, reporting model coefficients) and ones containing primarily text (e.g. item wording). Those can be styled a bit differently to fit conventions and the particular content. More general tutorial and docs on {tinytable} can be found here.\n\n4.3.1 Tables with numbers\nThese tables include things like tables with sample characteristics (e.g. age, gender, education, place of living etc), summary statistics like means and standard deviations for important variables etc. Here is the basic theme for {tinytable} that contains mainly summary stats:\n\ntt_theme_cbu &lt;- function(x) {\n  out &lt;- x |&gt;\n    tt() |&gt;\n    format_tt(digits = 2, num_fmt = \"significant_cell\", num_mark_dec = \",\") |&gt;\n    style_tt(j = 1:ncol(x), align = \"c\") |&gt;\n    style_tt(i = 0, bold = TRUE) |&gt;\n    style_tt(i = nrow(x), line = \"b\", line_color = \"#ABABAB\") |&gt;\n    style_tt(i = 0, line = \"b\", line_color = \"#ABABAB\") |&gt;\n    style_tt(i = 0, line = \"t\", line_color = \"#ABABAB\")\n  return(out)\n}\n\nHere is an exmaple table:\n\ncont_df %&gt;%\ngroup_by(a) %&gt;%\nsummarise(across(.cols = c(x, y),\n                .fns = list(\"mean\" = \\(x) mean(x),\n                           \"sd\" = \\(x) sd(x)\n                           ), .names = \"{.col} {.fn}\")) %&gt;%\ntt_theme_cbu()\n\n\n\nTable 4.1: Some summary statistics split by category\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                x mean\n                x sd\n                y mean\n                y sd\n              \n        \n        \n        \n                \n                  a\n                  2\n                  1,2\n                  3,5\n                  4,3\n                \n                \n                  b\n                  1,9\n                  1,2\n                  2,2\n                  2,5\n                \n                \n                  c\n                  2\n                  1,2\n                  9,2\n                  4,1\n                \n        \n      \n    \n\n\n\n\n\n\nOne common issue with table is when we want to group the rows in a table. Lets see an example and how we can do it in {tinytable}. You can set the grouping using style_tt(). the argument i specifies which rows to merge, j specifies which column to target and rowspan how many rows to merge for each i. alignv specifies how to vertically align text in the merged\n\ngrouped_df &lt;- data.frame(\n    category = sample(c(\"option 1\", \"option 2\", \"option 3\"), 1e3, replace = T),\n    group = sample(c(\"group 1\", \"group 2\", \"group 3\"), 1e3, replace = T),\n    y = rnorm(1e3)\n)\n\ngrouped_df %&gt;%\ngroup_by(group, category) %&gt;%\nsummarise(across(y, .fns = list(\"mean\" = \\(x) mean(x),\n                           \"sd\" = \\(x) sd(x)\n                           ), .names = \"{.col} {.fn}\")) %&gt;%\ntt_theme_cbu() %&gt;%\nstyle_tt(i = c(1, 4, 7), j = 1, rowspan = 3, alignv = \"m\")\n\n`summarise()` has grouped output by 'group'. You can override using the\n`.groups` argument.\n\n\n\n\nTable 4.2: Some grouped summary statistis.\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                group\n                category\n                y mean\n                y sd\n              \n        \n        \n        \n                \n                  group 1\n                  option 1\n                  0,074\n                  0,88\n                \n                \n                  group 1\n                  option 2\n                  -0,11\n                  1,1\n                \n                \n                  group 1\n                  option 3\n                  0,03\n                  1\n                \n                \n                  group 2\n                  option 1\n                  -0,093\n                  0,97\n                \n                \n                  group 2\n                  option 2\n                  0,065\n                  1,1\n                \n                \n                  group 2\n                  option 3\n                  -0,011\n                  1\n                \n                \n                  group 3\n                  option 1\n                  -0,053\n                  0,9\n                \n                \n                  group 3\n                  option 2\n                  0,014\n                  0,92\n                \n                \n                  group 3\n                  option 3\n                  -0,26\n                  0,87\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n4.3.2 Text tables\nThese tables include tables that primarily present text, especially when presenting scale items. Here is the basic theme for {tinytable} that contains mainly text:\nHere is an example:\n\ntext_df &lt;- data.frame(\n    item = c(\"When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\",\n            \"I keep my emotions to myself.\",\n            \"When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\",\n            \"When I am feeling positive emotions, I am careful not to express them.\"),\n    mean = c(4.54, 2.34, 6.44, 3.55),\n    sd = c(0.67, 1.23, 1.12, 0.89)\n)\n\ntext_df %&gt;%\ntt_theme_cbu()\n\n\n\nTable 4.3: Emotion Regulation Questionnaire items with means and stnadard deviations\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                item\n                mean\n                sd\n              \n        \n        \n        \n                \n                  When I want to feel more positive emotion (such as joy or amusement), I change what I’m thinking about.\n                  4,5\n                  0,67\n                \n                \n                  I keep my emotions to myself.\n                  2,3\n                  1,2\n                \n                \n                  When I want to feel less negative emotion (such as sadness or anger), I change what I’m thinking about.\n                  6,4\n                  1,1\n                \n                \n                  When I am feeling positive emotions, I am careful not to express them.\n                  3,5\n                  0,89\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n4.3.3 Model output tables\nThese tables include any statistical models presented in table format. If we have the numbers stored separately (we just know the\nA decent alternative is to use {modelsummary} which is nicely integrated with {tinytable}. It automatically extracts information from all sorts of models and allows quite a bit of styling and formatting. Here is an example below:\n\nx &lt;- rnorm(1e3)\nx_2 &lt;- rnorm(1e3, 3, .7)\ny &lt;- rnorm(1e3, 1 + .4*x + .4*x_2 - .5*x*x_2)\ndf_cont_2 &lt;- data.frame(\n    x, x_2, y\n)\n\nlm_1 &lt;- lm(y ~ x + x_2, df_cont_2)\n\nlm_2 &lt;- lm(y ~ x*x_2, df_cont_2)\n\nmodelsummary(list(\"model 1\" = lm_1, \"model 2\" = lm_2), stars = TRUE,\n            shape = term ~ model + statistic,\n            gof_map = c(\"nobs\", \"r.squared\")) |&gt;\n    format_tt(digits = 2, num_fmt = \"significant_cell\", num_mark_dec = \",\") |&gt;\n    style_tt(i = 0, bold = TRUE) |&gt;\n    style_tt(i = 0, line = \"b\", line_color = \"#ABABAB\") |&gt;\n    style_tt(i = 0, line = \"t\", line_color = \"#ABABAB\")\n\n\n\nTable 4.4: Some stats from models with interactions\n\n\n\n\n\n    \n\n    \n    \n      \n        \n\n \nmodel 1\nmodel 2\n\n        \n              \n                 \n                Est.\n                S.E.\n                Est.\n                S.E.\n              \n        \n        + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\n        \n                \n                  (Intercept)\n                  1.053***\n                  0.146\n                  0.966***\n                  0.139\n                \n                \n                  x\n                  -1.074***\n                  0.033\n                  0.312*\n                  0.137\n                \n                \n                  x_2\n                  0.375***\n                  0.048\n                  0.403***\n                  0.045\n                \n                \n                  x × x_2\n                  \n                  \n                  -0.466***\n                  0.045\n                \n                \n                  Num.Obs.\n                  1000\n                  \n                  1000\n                  \n                \n                \n                  R2\n                  0.537\n                  \n                  0.582\n                  \n                \n        \n      \n    \n\n\n\n\n\n\n\nwhich information should be included:\nmultiple models",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Theme</span>"
    ]
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "cbu styleguide",
    "section": "",
    "text": "What this tutorial has to include:\n\nGeneral introduction to quarto?\nOverview of the format and its tech stack:\n\nquarto to write so we work in markdown\ntypst to render to pdf. DO NOT TOUCH\nZotero for citations\nR/python/julia for calculations. Preferably R\n\nWalkthrough making a report\n\nWriting regular text\nfootnotes\nHeadings: we use level 4 headings for sections\nMaking tables\nMaking plots\nReferences:\n\nZotero\nreferencing tables and plots",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>tutorial.html</span>"
    ]
  },
  {
    "objectID": "text.html#some-additional-rules-and-tips",
    "href": "text.html#some-additional-rules-and-tips",
    "title": "2  text",
    "section": "",
    "text": "avoid very long titles for reports\navoid very long section titles\nmake sure text does not overlap on plots -&gt;\n{ggrepel} package has a function geom_text_repel() which tries to adjust labels so that they don’t overlap. For example this plot has an issue with overlap:\n\nlibrary(dplyr)\nlibrary(ggplot2)\ngraph_df &lt;- data.frame(\n  target = c(rep(\"group 1\", 6), rep(\"group 2\", 6)),\n  year =  c(rep(2017, 3), rep(2021, 3),rep(2017, 3), rep(2021, 3)),\n  att = factor(c(rep(c(\"ok\", \"meh\", \"not ok\"), 4)), ordered = T, levels = c(\"ok\", \"meh\", \"not ok\")),\n  value = c(.0714, .3121, .6165, .034, .2021, .7639, .0189, .1859, .7952, .0103, .0964, .8933)\n)\n\ngraph_df %&gt;%\n  ggplot(aes(x = target, y = value, fill = att)) +\n  geom_col(width = .6) +\n  geom_text(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = \"stack\", vjust = 2) +\n  scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                              \"meh\" = \"grey80\",\n                              \"not ok\" = \"tomato4\")) +\n  facet_wrap(~year) +\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(legend.title = element_blank())\n\n\n\n\n\n\n\n\nWe can deal with this using geom_text_repel(). Additional arguments like force control how much the labels should be pushed from their original positions.\n\nlibrary(ggrepel)\n\ngraph_df %&gt;%\n  ggplot(aes(x = target, y = value, fill = att)) +\n  geom_col(width = .6) +\n  geom_text_repel(aes(label = paste0(value*100, \"%\")),direction = \"y\", position = \"stack\", vjust = 2) +\n  scale_fill_manual(values= c(\"ok\"= \"steelblue\",\n                              \"meh\" = \"grey80\",\n                              \"not ok\" = \"tomato4\")) +\n  facet_wrap(~year) +\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(legend.title = element_blank())\n\n\n\n\n\n\n\n\nensure proper contrast for text:\nFor example the plot below does not have decent contrast when all text is in black:\n\nb_df &lt;- data.frame(\n    a = sample(letters[1:5], 1e3, replace = T),\n    b = sample(letters[1:3], 1e3, replace = T)\n) %&gt;%\ncount(a,b)\n\nb_df %&gt;%\nggplot(aes(x = a, y = n, fill = b)) +\ngeom_col(position = \"fill\") +\ngeom_text(aes(label = n),direction = \"y\", position = \"fill\", vjust = 2) +\nscale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\ntheme_minimal() +\ntheme(legend.title = element_blank(),\n     legend.position = \"top\")\n\nWarning in geom_text(aes(label = n), direction = \"y\", position = \"fill\", :\nIgnoring unknown parameters: `direction`\n\n\n\n\n\n\n\n\n\nWe can fix that using {ggfittext} and geom_fit_text():\n\nlibrary(ggfittext)\n\nb_df %&gt;%\nggplot(aes(x = a, y = n, fill = b)) +\ngeom_col(position = \"fill\") +\ngeom_fit_text(aes(label = n, fill = b), position = \"fill\", vjust = 2, contrast = TRUE, show_guide = FALSE) +\nscale_fill_manual(values = c(\"grey80\", \"firebrick4\", \"mistyrose\")) +\ntheme_minimal() +\ntheme(legend.title = element_blank(),\n     legend.position = \"top\")\n\n\n\n\n\n\n\n\nBe accessible… Don’t write about logits. Opt for Average Marginal Effects in percentages instead. If possible try to get a sense of scale and some interpretation for the effects (maybe something like probability of superiority over cohen’s d etc.)\nBut remain scientific. Be precise, don’t overstate - this is scientific writing.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>text</span>"
    ]
  }
]